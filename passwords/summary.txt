Author: Sydney Nguyen
-credit to Ashok and Lily for helping me with part 2 main ideas aka to use a helper and dictionary!

Part 1
Total time: 0m0.58s
Number of hashes computed: 267751
Passwords cracked: 2805
Time per hash computed: 0.00000216662
Time per password cracked: 0.0002067736
Passwords cracked per number of hashes computed: 0.01047615134

Part 2
Should be noted there may be an error in calculations because of low CPU and crashing
Total time: 61m54.231s (should be noted it crashed)
Number of hashes computed: 2,932,653,801
Passwords cracked: 106 
Time per hash computed: 0.00000126642
Time per password cracked: 35.0377358491
Passwords cracked per number of hashes computed: 3.61447369e-8

Part 3
Total time: 12m45.649s
Number of hashes computed: 754,010,283
Passwords cracked: 2805
Time per hash computed: 0.000000016511
Time per password cracked: 0.00443850267
Passwords cracked per number of hashes computed: 0.0000037201

Analysis:
- Did your time per hash computed change between phases? By what factor? Why?
The time per hash computed stayed fairly consistent which is to be expected, as with the hashing is constant no matter the input we are
producing the same 32 byte hash string from the same 16 byte passwords, according to Jeff's assignment page. 

- Did your time per password crack change between phases? By what factor? Why?
Yes it did change, it makes sense as for part 2 we are attempting to crack 2 words passwords which increases the amount of possibilites 
the password can be as well as the amount of comparisons we will need to do. There isn't necessarily a pattern but phase 2 took 169449 times 
the amount of time needed that phase one needed and phase 3 needed 21 times the amount of time as phase one. This is to be expected because 
Phase 3 only needs a little more time to take in the salts and comparison where phase 2 needs to take into account over double the words. 

- Suppose you wanted to precompute all the hashes for each possible password
so you could just look up the password in a table indexed by the hash. How much
memory would be required for each phase?

For password 1 we would need enough memory to simply take all words and multiply it by the bytes of the hash:
    267751 * 80 = 21420080 bytes
For password 2 we do something very similar but need to multiply the words by itself as they are two word unsalted passwords multiplied by the bytes of the hash:
    267751 * 267751 * 80 = 5.7352478e+12 bytes
For password 3 we take the same computation from password one but then need to multiply the salt into account:
    267751 * 2805 * 80 = 60083324400 bytes

- Give 3-4 reasons we should store password hashes and not the passwords themselves.
Think in terms of threats, who the attackers might be, etc.

Hashing is important for storing passwords because when you enter a password it is sent to a database.
Whomever runs that database will be able to read and access the passwords of all accounts if they are in plain text, 
but with hashing it will be seen as mumbo jumbo, unless they are aware of hashing.

Another important reason to has is say that the said person does know what hashing is and wants to access the data hashing 
is very hard to reverse engineer making it very time consuming and need a lot of computer power to crack. Hashing makes 
it extremly difficult to decode the hash. One small error can cause a major error in the long run as hashes are very input sensitive 
the slightest difference can create a fully different has therefore making one error in reverse engineering fatal for the whole hacking plan.

Hashing with salt allows for many users to have the same password, but not have the same hash for their password.
As many people like to choose simple passwords as their loved ones names or simply password this allows for more 
people to have the password and if one of their hash's were to be comporomised the others with the same password's data will still be protected.

Hashing the passwords makes it easier to store and use in the database as many different people will have 
different length passwords varying in characters and symbols hashing creates a uniform data for storage. 

